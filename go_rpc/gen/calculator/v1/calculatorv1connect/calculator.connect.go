// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: calculator/v1/calculator.proto

package calculatorv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go_rpc/gen/calculator/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CalculatorServiceName is the fully-qualified name of the CalculatorService service.
	CalculatorServiceName = "calculator.v1.CalculatorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CalculatorServiceCalculatorProcedure is the fully-qualified name of the CalculatorService's
	// Calculator RPC.
	CalculatorServiceCalculatorProcedure = "/calculator.v1.CalculatorService/Calculator"
)

// CalculatorServiceClient is a client for the calculator.v1.CalculatorService service.
type CalculatorServiceClient interface {
	Calculator(context.Context, *connect.Request[v1.CalculatorRequest]) (*connect.Response[v1.CalculatorResponse], error)
}

// NewCalculatorServiceClient constructs a client for the calculator.v1.CalculatorService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCalculatorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CalculatorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	calculatorServiceMethods := v1.File_calculator_v1_calculator_proto.Services().ByName("CalculatorService").Methods()
	return &calculatorServiceClient{
		calculator: connect.NewClient[v1.CalculatorRequest, v1.CalculatorResponse](
			httpClient,
			baseURL+CalculatorServiceCalculatorProcedure,
			connect.WithSchema(calculatorServiceMethods.ByName("Calculator")),
			connect.WithClientOptions(opts...),
		),
	}
}

// calculatorServiceClient implements CalculatorServiceClient.
type calculatorServiceClient struct {
	calculator *connect.Client[v1.CalculatorRequest, v1.CalculatorResponse]
}

// Calculator calls calculator.v1.CalculatorService.Calculator.
func (c *calculatorServiceClient) Calculator(ctx context.Context, req *connect.Request[v1.CalculatorRequest]) (*connect.Response[v1.CalculatorResponse], error) {
	return c.calculator.CallUnary(ctx, req)
}

// CalculatorServiceHandler is an implementation of the calculator.v1.CalculatorService service.
type CalculatorServiceHandler interface {
	Calculator(context.Context, *connect.Request[v1.CalculatorRequest]) (*connect.Response[v1.CalculatorResponse], error)
}

// NewCalculatorServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCalculatorServiceHandler(svc CalculatorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	calculatorServiceMethods := v1.File_calculator_v1_calculator_proto.Services().ByName("CalculatorService").Methods()
	calculatorServiceCalculatorHandler := connect.NewUnaryHandler(
		CalculatorServiceCalculatorProcedure,
		svc.Calculator,
		connect.WithSchema(calculatorServiceMethods.ByName("Calculator")),
		connect.WithHandlerOptions(opts...),
	)
	return "/calculator.v1.CalculatorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CalculatorServiceCalculatorProcedure:
			calculatorServiceCalculatorHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCalculatorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCalculatorServiceHandler struct{}

func (UnimplementedCalculatorServiceHandler) Calculator(context.Context, *connect.Request[v1.CalculatorRequest]) (*connect.Response[v1.CalculatorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("calculator.v1.CalculatorService.Calculator is not implemented"))
}
